/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Viewer;

import java.awt.BorderLayout;
import java.io.File;
import java.io.IOException;
import java.security.InvalidParameterException;
import java.util.logging.Level;
import java.util.logging.Logger;
import static Viewer.ExportDialog.ExportedFileType.*;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author ntx
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        colSelector = new javax.swing.JComboBox();
        searchedValue = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        bar = new javax.swing.JProgressBar();
        status = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DBC / DB2 Viewer");

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        colSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colSelectorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchedValue, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchedValue)
                .addComponent(colSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jScrollPane1.setDoubleBuffered(true);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(2555464, 2555464));

        table.setAutoCreateRowSorter(true);
        table.setModel(new DBTableModel(1,1));
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        table.setDoubleBuffered(true);
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bar, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(bar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        status.setText("Status:");

        jMenu1.setText("File");

        jMenu3.setText("Open");

        jMenuItem3.setText("Autodetect Format");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem4.setText("Manualy enter Format");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenu1.add(jMenu3);
        jMenu1.add(jSeparator1);

        jMenuItem2.setText("Reload");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);
        jMenu1.add(jSeparator3);

        jMenuItem5.setText("Export");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);
        jMenu1.add(jSeparator2);

        jMenuItem6.setText("Exit");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("View");
        jMenu2.setEnabled(false);

        jMenu4.setText("Format");

        jMenuItem10.setText("Get");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem10);

        jMenuItem9.setText("Set");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem9);

        jMenu2.add(jMenu4);
        jMenu2.add(jSeparator4);

        jMenuItem1.setText("File Statistics");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(status)
                .addGap(219, 219, 219)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(status, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if (reader == null || !reader.isLodead())
            showErrorMessage("Error", "No file Loaded");
        else
            reader.FillTable(table, bar, colSelector);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void colSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colSelectorActionPerformed

    }//GEN-LAST:event_colSelectorActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        if (reader == null || !reader.isLodead())
            showErrorMessage("Error", "No File loaded");
        else
        {
           export = new ExportDialog(this, true);
           export.show();
           File outputFile = export.getSelectedFile();
           if (outputFile != null)
           {
               try {
                    switch (export.getExportType())
                    {
                         case EXPORT_CSV:
                             reader.ExportToCSV(outputFile);
                             break;
                         case EXPORT_SQL:
                             reader.ExportToSQL(outputFile, export.getTableName(), export.createTable(), export.exportData(), export.singleRowExport(), export.getRowsPerInsert());
                    }
                    status.setText("Export successfull");
                } catch (IOException ex) {
                 showErrorMessage("Error", ex.getMessage());
               }
           }
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        JPanel messagePanel = new JPanel(new BorderLayout());
        JLabel label = new JLabel("File format:");
        JTextField text = new JTextField();
        text.setText(reader.getFormat());
        text.setEditable(false);
        messagePanel.add(label, BorderLayout.PAGE_START);
        messagePanel.add(text, BorderLayout.CENTER);
        JOptionPane.showMessageDialog(this, messagePanel);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        String in = JOptionPane.showInputDialog(this, "Insert format string", reader.getFormat());
        if (!reader.setFormat(in))
            showErrorMessage("Error", "Invalid format");
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        showInfoMessage("File Statistics", reader.getStatisticsMessage());
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    @SuppressWarnings("empty-statement")
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        JFileChooser chooser = new JFileChooser(file);
        chooser.setFileFilter(new FileNameExtensionFilter("DBC / DB2 file", "dbc", "db2"));
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("DBC files", "dbc"));
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("DB2 files", "db2"));
        int ret = chooser.showOpenDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION)
        {
            file = chooser.getSelectedFile();
            String ext = file.getName().substring(file.getName().lastIndexOf('.')).toLowerCase();
            if (ext.equals(".dbc"))
                reader = new DBCReader();
            else
                reader = new DB2Reader();
            try {
                jMenu2.setEnabled(false);
                reader.Open(file, null);
                status.setText("File " + file.getName() + " opened successfully");
                reader.FillTable(table, bar, colSelector);
                jMenu2.setEnabled(true);
            }
            catch (InvalidParameterException ex)
            {
                showErrorMessage("ERROR", ex.getMessage());
                status.setText(ex.getMessage());
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }   
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        JFileChooser chooser = new JFileChooser(file);
        chooser.setFileFilter(new FileNameExtensionFilter("DBC / DB2 file", "dbc", "db2"));
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("DBC files", "dbc"));
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("DB2 files", "db2"));
        int ret = chooser.showOpenDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION)
        {
            file = chooser.getSelectedFile();
            String ext = file.getName().substring(file.getName().lastIndexOf('.')).toLowerCase();
            if (ext.equals(".dbc"))
                reader = new DBCReader();
            else
                reader = new DB2Reader();
            String in = JOptionPane.showInputDialog(this, "Insert format string");
            try {
                jMenu2.setEnabled(false);
                reader.Open(file, in);
                status.setText("File " + file.getName() + " opened successfully");
                reader.FillTable(table, bar, colSelector);
                jMenu2.setEnabled(true);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch (InvalidParameterException ex)
            {
                showErrorMessage("ERROR", ex.getMessage());
                status.setText(ex.getMessage());
            }   
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (reader == null)
        {
            showErrorMessage("Error", "No file loaded");
            return;
        }
        if (searchedValue.getText().length() == 0)
        {
            showErrorMessage("Error", "Please enter something to search for.");
            return;
        }
        if (table.getRowCount() == 0)
        {
            showInfoMessage("Title", "No data found");
            return;
        }
        Object col = table.getValueAt(0, colSelector.getSelectedIndex());
        int row = findValue(searchedValue.getText());
        if (row == -1)
            showInfoMessage("Not found", "Seached value not found");
        else
        {
            table.getSelectionModel().setSelectionInterval(row, row);
            table.scrollRectToVisible(table.getCellRect(row,0, true));
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void showErrorMessage(String title, String message)
    {
        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
    } 
    
    public void showInfoMessage(String title, String message)
    {
        JOptionPane.showMessageDialog(this, message, title, JOptionPane.INFORMATION_MESSAGE);
    } 
    
    private int linearSearch(int colId, String value)
    {
        TableModel model = table.getModel();
        for (int i = 0; i < model.getRowCount(); ++i)
        {
            int comp;
            Object colValue = model.getValueAt(i, colId);
            if (colValue instanceof Float)
                comp = ((Float)colValue).compareTo(Float.parseFloat(value));
            else if (colValue instanceof Integer)
                comp = ((Integer)colValue).compareTo(Integer.parseInt(value));
            else
                comp = ((String)colValue).compareTo(value);
            if (comp == 0)
                return i;
        }
        return -1;
    }

    private int binarySearch(int colId, String value, int mod)
    {
        TableModel model = table.getModel();
        int low = 0, high = model.getRowCount() - 1, mid = 0;
        while (low <= high)
        {
            mid = (low + high) / 2;
            int comp;
            Object colValue = model.getValueAt(mid, colId);
            if (colValue instanceof Float)
                comp = ((Float)colValue).compareTo(Float.parseFloat(value));
            else if (colValue instanceof Integer)
                comp = ((Integer)colValue).compareTo(Integer.parseInt(value));
            else
                comp = ((String)colValue).compareTo(value);
            if (comp == 0)
                return (model.getRowCount() + mod * mid) % model.getRowCount() + (mod == -1 ? -1 : 0);
            if (comp > 0)
                high = mid - 1;
            else
                low = mid + 1;
        }
        return -1;
    }

    private int findValue(String value){
        Object[] sortKeys = table.getRowSorter().getSortKeys().toArray();
        TableModel model = table.getModel();
        boolean sorted = false;
        int mod = 1;
        int colId = colSelector.getSelectedIndex();
        if (sortKeys.length == 1)
            for (Object key : sortKeys)
            {
                RowSorter.SortKey k = (RowSorter.SortKey) key;
               if (k.getColumn() == colId);
               {
                   sorted = true;
                   mod = k.getSortOrder() == SortOrder.ASCENDING ? 1 : -1;
               }
            }
        if (model.getColumnClass(colId).equals(Integer.class))
        {
            try {
                Integer.parseInt(value);
            } catch (NumberFormatException ex)
            {
                return -1;
            }
        }
        if (model.getColumnClass(colId).equals(Float.class))
        {
            try {
                Float.parseFloat(value);
            } catch (NumberFormatException ex)
            {
                return -1;
            }
        }
        if (sorted)
            return binarySearch(colId, value, mod);
        else
            return linearSearch(colId, value);
    }
    
    class DBTableModel extends DefaultTableModel {

        public DBTableModel(int cols, int rows){
            super(cols, rows);
        }
        @Override
        public Class getColumnClass(int col){
            String format = null;
            if (reader != null)
                format = reader.getFormat();
            if (format == null)
                return Object.class;
            switch (format.toCharArray()[col])
            {
                case 'n':
                case 'i':
                    return Integer.class;
                case 'f':
                    return Float.class;
                case 's':
                    return String.class;
            }
            return Object.class;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar bar;
    private javax.swing.JComboBox colSelector;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JTextField searchedValue;
    private javax.swing.JLabel status;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
    private File file;
    private DBFileReader reader;
    private ExportDialog export;
    private JTextField searchValue;
}
